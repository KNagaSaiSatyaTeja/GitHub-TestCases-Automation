name: Run Code Tests

on:
  push:
    paths:
      - "solutions/**"
  pull_request:
    paths:
      - "solutions/**"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc g++ openjdk-17-jdk python3

      - name: Detect Changed Files
        id: changed-files
        run: |
          BEFORE_COMMIT="${{ github.event.before }}"
          if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
            BEFORE_COMMIT=$(git rev-list --max-parents=0 HEAD)  # Fallback to first commit
          fi
          CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" "${{ github.sha }}")
          echo "Changed Files: $CHANGED_FILES"
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "::set-output name=changed_files::$CHANGED_FILES"

      - name: Check for C Files
        id: check-c
        run: |
          if echo "$CHANGED_FILES" | grep -qE '\.c$'; then
            echo "::set-output name=run_c::true"
          fi

      - name: Check for C++ Files
        id: check-cpp
        run: |
          if echo "$CHANGED_FILES" | grep -qE '\.cpp$'; then
            echo "::set-output name=run_cpp::true"
          fi

      - name: Check for Python Files
        id: check-python
        run: |
          if echo "$CHANGED_FILES" | grep -qE '\.py$'; then
            echo "::set-output name=run_python::true"
          fi

      - name: Check for Java Files
        id: check-java
        run: |
          if echo "$CHANGED_FILES" | grep -qE '\.java$'; then
            echo "::set-output name=run_java::true"
          fi

      - name: Compile and Run C Program
        if: steps.check-c.outputs.run_c == 'true'
        run: |
          gcc solutions/*.c -o solution_c
          ./solution_c < test_cases/input.txt

      - name: Compile and Run C++ Program
        if: steps.check-cpp.outputs.run_cpp == 'true'
        run: |
          g++ solutions/*.cpp -o solution_cpp
          ./solution_cpp < test_cases/input.txt

      - name: Run Python Program
        if: steps.check-python.outputs.run_python == 'true'
        run: |
          python3 solutions/*.py < test_cases/input.txt

      - name: Compile and Run Java Program
        if: steps.check-java.outputs.run_java == 'true'
        run: |
          javac solutions/*.java
          java -cp solutions Solution < test_cases/input.txt
