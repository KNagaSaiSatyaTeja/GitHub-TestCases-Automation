name: Run Code Tests

on:
  push:
    paths:
      - "solutions/**"
  pull_request:
    paths:
      - "tests/**"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Ensure previous commit is available

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc g++ openjdk-17-jdk python3

      - name: Detect Changed Files
        id: changed-files
        run: |
          BEFORE_COMMIT="${{ github.event.before }}"
          if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
            BEFORE_COMMIT=$(git rev-parse HEAD~1)  # Use last commit as fallback
          fi
          
          CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD)
          echo "Detected changed files: $CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No file changes detected. Exiting..."
            exit 1
          fi

          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Determine File Type
        id: determine-file
        run: |
          if echo "$CHANGED_FILES" | grep -qE '\.c$'; then
            echo "language=C" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -qE '\.cpp$'; then
            echo "language=C++" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -qE '\.py$'; then
            echo "language=Python" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -qE '\.java$'; then
            echo "language=Java" >> $GITHUB_ENV
          else
            echo "No relevant file changes detected. Exiting..."
            exit 1
          fi

      - name: Compile and Run C++ Program
        if: env.language == 'C++'
        run: |
          if [ -z "$(ls -A solutions/*.cpp 2>/dev/null)" ]; then
            echo "No C++ files found. Exiting..."
            exit 1
          fi
          g++ solutions/*.cpp -o solution_cpp
          if [ $? -ne 0 ]; then
            echo "Compilation failed. Check for errors."
            exit 1
          fi
          
          # Run the program and save output
          ./solution_cpp < tests/test.cpp > test_output.log

          # Count passed test cases (Assuming lines containing 'PASS' indicate success)
          PASSED_TESTS=$(grep -c "PASS" test_output.log || echo 0)
          TOTAL_TESTS=$(wc -l < tests/test.cpp || echo 0)
          
          echo "✅ $PASSED_TESTS out of $TOTAL_TESTS test cases passed." | tee -a $GITHUB_STEP_SUMMARY

      - name: Compile and Run C Program
        if: env.language == 'C'
        run: |
          if [ -z "$(ls -A solutions/*.c 2>/dev/null)" ]; then
            echo "No C files found. Exiting..."
            exit 1
          fi
          gcc solutions/*.c -o solution_c
          ./solution_c < tests/test.c > test_output.log

          PASSED_TESTS=$(grep -c "PASS" test_output.log || echo 0)
          TOTAL_TESTS=$(wc -l < tests/test.c || echo 0)
          echo "✅ $PASSED_TESTS out of $TOTAL_TESTS test cases passed." | tee -a $GITHUB_STEP_SUMMARY

      - name: Run Python Program
        if: env.language == 'Python'
        run: |
          if [ -z "$(ls -A solutions/*.py 2>/dev/null)" ]; then
            echo "No Python files found. Exiting..."
            exit 1
          fi
          python3 solutions/*.py < tests/test.py > test_output.log

          PASSED_TESTS=$(grep -c "PASS" test_output.log || echo 0)
          TOTAL_TESTS=$(wc -l < tests/test.py || echo 0)
          echo "✅ $PASSED_TESTS out of $TOTAL_TESTS test cases passed." | tee -a $GITHUB_STEP_SUMMARY

      - name: Compile and Run Java Program
        if: env.language == 'Java'
        run: |
          if [ -z "$(ls -A solutions/*.java 2>/dev/null)" ]; then
            echo "No Java files found. Exiting..."
            exit 1
          fi
          javac solutions/*.java
          if [ $? -ne 0 ]; then
            echo "Java compilation failed. Check for errors."
            exit 1
          fi
          java -cp solutions Solution < tests/Test.java > test_output.log

          PASSED_TESTS=$(grep -c "PASS" test_output.log || echo 0)
          TOTAL_TESTS=$(wc -l < tests/Test.java || echo 0)
          echo "✅ $PASSED_TESTS out of $TOTAL_TESTS test cases passed." | tee -a $GITHUB_STEP_SUMMARY
